{
 "runs":[
  {
   "tool":{
    "driver":{
     "name":"torch.onnx.dynamo_export",
     "contents":[
      "localizedData",
      "nonLocalizedData"
     ],
     "language":"en-US",
     "rules":[
      {
       "id":"FXE0015",
       "fullDescription":{
        "text":"Determine if type promotion is required for the FX node. Insert cast nodes if needed.",
        "markdown":"This diagnostic monitors the node-level type promotion insertion process. In PyTorch, there is an automatic process called implicit type promotion,\nwhere the input types of an operator are promoted to a common type. The determination of the common type is based on the type promotion rule specific to each operator.\nTo learn more about PyTorch's type promotion rules, refer to the [elementwise_dtypes doc](https://github.com/pytorch/pytorch/blob/f044613f78df713fb57f70c608483c9f10ad332e/torch/_prims_common/__init__.py#L1252-L1335)\nand [torch._refs ops](https://github.com/pytorch/pytorch/blob/a475ea4542dfe961c9d097e33ab5041f61c8c17f/torch/_refs/__init__.py#L484).\n\nHowever, implicit type promotion is not supported in ONNX. Therefore, to replicate the PyTorch behavior, we need to explicitly insert cast nodes.\nThis diagnostic tracks the process of node-level type promotion insertion.\n\nThe type promotion rules used by this process can be found in `torch/onnx/_internal/fx/passes/type_promotion.py.`\nTo update or add new type promotion rules, please refer to the [Note: Update type promotion rule] section.\n"
       },
       "name":"fx-node-insert-type-promotion",
       "shortDescription":{
        "text":"Determine if type promotion is required for the FX node. Insert cast nodes if needed."
       }
      },
      {
       "id":"FXE0008",
       "fullDescription":{
        "text":"Transforms an FX node to an ONNX node.",
        "markdown":"This diagnostic tracks the transformation process from an FX Node to ONNX [Operators](https://onnx.ai/onnx/operators/).\n\nThe process of converting FX Node to ONNX Node involves dealing with six distinct node types:\n  1. `placeholder`: Represents a module input, maps to an ONNX graph input.\n  2. `call_module`: Symbolizes a call to a submodule, maps to an ONNX\n  3. `call_method`: Symbolizes a method call. Not yet implemented.\n  4. `call_function`: Symbolizes a function call. [Core ATen](https://pytorch.org/docs/stable/ir.html#core-aten-ir) is expected\n    as the function call target. The mapping from ATen to ONNX is implemented by [ONNXScript torchlib](https://github.com/microsoft/onnxscript/tree/main/onnxscript/function_libs/torch_lib/ops).\n    This [guide](https://pytorch.org/docs/stable/onnx.html#onnx-script-functions) shows how to write and register a custom symbolic function for call_function FX node.\n  5. `get_attr`: Indicates an attribute access within the current module. Maps to an ONNX graph initializer.\n  6. `output`: Represents the module's output. Maps to an ONNX graph output.\n\nFor a granular understanding of how each node type is transformed, refer to the implementation details in `FxOnnxInterpreter`.\n"
       },
       "name":"fx-node-to-onnx",
       "shortDescription":{
        "text":"Transforms an FX node to an ONNX node."
       }
      },
      {
       "id":"FXE0010",
       "fullDescription":{
        "text":"FX graph transformation during ONNX export before converting from FX IR to ONNX IR.",
        "markdown":"This diagnostic tracks the FX passes executed during the ONNX export process prior\nto converting from FX IR (Intermediate Representation) to ONNX IR.\n\nUnder the scope of ONNX export, an FX pass refers to a specific transformation applied to the FX GraphModule.\nThe primary aim of these passes is to streamline the graph into a format that aligns more with the ONNX IR.\nMoreover, these passes work to substitute unsupported FX IR features with those recognized and endorsed by\nONNX IR. Common transformations include, but aren't limited to, decomposition, functionalization and\ntype promotion.\n\nFor those who are interested in a comprehensive log detailing the modifications made during these passes,\nthere are a couple of options:\n\n- Set DiagnosticOptions.verbosity_level to logging.DEBUG.\n- Activate the environment variable TORCH_LOGS='onnx_diagnostics'.\n\nHowever, it's noteworthy that by default, such detailed logging is turned off. The primary reason being\nits considerable impact on performance.\n\nFor an in-depth understanding of each specific pass, please refer to the directory: torch/onnx/_internal/fx/passes.\n"
       },
       "name":"fx-pass",
       "shortDescription":{
        "text":"FX graph transformation during ONNX export before converting from FX IR to ONNX IR."
       }
      },
      {
       "id":"FXE0007",
       "fullDescription":{
        "text":"Transforms graph from FX IR to ONNX IR.",
        "markdown":"This diagnostic tracks the transformation process from an FX Graph (in FX IR) to an ONNX Graph (in ONNX IR).\n\n## Key Representations:\n\n- **FX Graph**: The graph in FX IR produced by dynamo or symbolic tracing.\n- **ONNX Graph**: The graph in ONNX IR and [operators](https://onnx.ai/onnx/operators/).\n\n## Additional Notes:\n\n- Prior to this transformation step, the FX graph undergoes preprocessing through multiple FX passes.\n  To gain insight into these transformations, refer to diagnostic `FXE0010`.\n- To enable a detailed view of the graph transformation in progress within this diagnostic, switch to the DEBUG mode.\n\n  - Set DiagnosticOptions.verbosity_level to logging.DEBUG.\n  - Activate the environment variable TORCH_LOGS='onnx_diagnostics'.\n\n- For specific information related to node-level FX to ONNX transformations, explore the diagnostic `FXE0008`.\n"
       },
       "name":"fx-graph-to-onnx",
       "shortDescription":{
        "text":"Transforms graph from FX IR to ONNX IR."
       }
      },
      {
       "id":"FXE0014",
       "fullDescription":{
        "text":"Find the OnnxFunction that matches the input dtypes by comparing them with their opschemas. A warning will be issued if the matched OnnxFunction is not an exact match.",
        "markdown":"When an ATen/Custom operator is registered and needs to be dispatched to an OnnxFunction, the input/attribute\ndtypes of the ATen/Custom operator are compared with the input/attribute dtypes of the OnnxFunction opschemas\nto find a match. However, if a perfect/exact match is not found, the dispatcher will attempt to find\nthe nearest match with the highest number of input/attribute dtypes matching the OnnxFunction opschemas, while\nissuing a warning.\n\nThere are two types of level that can be triggered in this rule:\n\n1. NOTE: A perfect match is found, and no warning is issued.\n2. WARNING: The matched OnnxFunction is not a perfect/exact match.\n\nHere are some suggestions based on the WARNING situation:\n\n1. If there are NO errors or mismatches in the results, it is safe to disregard this warning,\n  as the definition of OnnxFunction schema is usually more stringent.\n2. If there are errors or mismatches in the results, it is recommended to:\n  (a) Enable op_level_debugging to determine if the OnnxFunction might be incorrect.\n  (b) Report the issue to the PyTorch-ONNX team.\n  (c) Create/register a custom symbolic function to replace the default one.\n"
       },
       "name":"find-opschema-matched-symbolic-function",
       "shortDescription":{
        "text":"Find the OnnxFunction that matches the input/attribute dtypes by comparing them with their opschemas."
       }
      },
      {
       "id":"FXE0016",
       "fullDescription":{
        "text":"This rule involves finding the list of OnnxFunction for the PyTorch operator overload in the ONNX registry. If the operator overload is not supported but its default overload is, a warning will be issued. If both the operator overload and its default overload are not supported, an error will be issued.",
        "markdown":"The operator overload name serves the purpose of verifying whether a PyTorch operator is registered in the ONNX registry.\nIf it's not found, the dispatcher takes a fallback approach and tries to locate the default overload of the PyTorch\noperator in the registry. If even the default overload is absent, it signifies that the operator is officially unsupported.\n\nThere are three types of level that can be triggered in this rule:\n\n1. NOTE: The op overload is supported.\n2. WARNING: The op overload is not supported, but it's default overload is supported.\n3. ERROR: The op overload is not supported, and it's default overload is also not supported.\n\nHere are some suggestions based on the WARNING situation:\n\n1. If there are NO errors or mismatches in the results, it is safe to disregard this warning.\n2. If there are errors or mismatches in the results, it is recommended to:\n  (a) Enable op_level_debugging to determine if the OnnxFunction might be incorrect.\n  (b) Report the unsupported overload to the PyTorch-ONNX team.\n  (c) Create/register a custom symbolic function to replace the default one.\n\nHere are some suggestions based on the ERROR situation:\n\n1. Report the unsupported operator to the PyTorch-ONNX team.\n2. Create/register a custom symbolic function to replace the default one.\n"
       },
       "name":"find-operator-overloads-in-onnx-registry",
       "shortDescription":{
        "text":"Find the list of OnnxFunction of the PyTorch operator in onnx registry."
       }
      }
     ],
     "version":"2.4.1+cu121"
    }
   },
   "language":"en-US",
   "newlineSequences":[
    "\r\n",
    "\n"
   ],
   "results":[
    {
     "message":{
      "markdown":"Running Decompose pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.decomp.Decompose'>\n- args: Tuple[length=3](\nTensor(i64[1, 2]),\nTensor(f32[1, 2880, 10]),\nFalse,\n)\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running Decompose pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":243
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running Functionalize pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.functionalization.Functionalize'>\n- args: Tuple[length=3](\nTensor(i64[1, 2]),\nTensor(f32[1, 2880, 10]),\nFalse,\n)\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running Functionalize pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":243
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running RemoveInputMutation pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.functionalization.RemoveInputMutation'>\n- args: Tuple[length=3](\nTensor(i64[1, 2]),\nTensor(f32[1, 2880, 10]),\nFalse,\n)\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running RemoveInputMutation pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":243
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped l_time_: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(arg0)[placeholder]:Tensor(i64[1, 2])\n## Return values\nTensor(i64[1, 2])",
      "text":"Skipped l_time_: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped l_context_: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(arg1)[placeholder]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped l_context_: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped arg2: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(arg2)[placeholder]:None\n## Return values\n<class 'NoneType'>",
      "text":"Skipped arg2: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.unbind.int)[call_function]:List[length=2](\nTensor(i64[1]),\nTensor(i64[1]),\n): Cannot find type promotion rule for op: aten.unbind.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.unbind.int)[call_function]:List[length=2](\nTensor(i64[1]),\nTensor(i64[1]),\n)\n## Return values\nList[length=2](\nTensor(i64[1]),\nTensor(i64[1]),\n)",
      "text":"Skipped for fx.Node(aten.unbind.int)[call_function]:List[length=2](\nTensor(i64[1]),\nTensor(i64[1]),\n): Cannot find type promotion rule for op: aten.unbind.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1])\n## Return values\nTensor(i64[1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1])\n## Return values\nTensor(i64[1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._to_copy.default)[call_function]:Tensor(f32[1]): Cannot find type promotion rule for op: aten._to_copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._to_copy.default)[call_function]:Tensor(f32[1])\n## Return values\nTensor(f32[1])",
      "text":"Skipped for fx.Node(aten._to_copy.default)[call_function]:Tensor(f32[1]): Cannot find type promotion rule for op: aten._to_copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for div. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.div.Tensor)[call_function]:Tensor(f32[1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'div', (0, 1), (), ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument _to_copy is not promoted. Already torch.float32.\nArgument 365.25 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1])",
      "text":"Type promotion not needed for div. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Applied type promotion for mul. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument div is not promoted. Already torch.float32.\nArgument 2(Scalar of equivalent dtype: torch.int64) is promoted to torch.float32.\n## Return values\nTensor(f32[1])",
      "text":"Applied type promotion for mul. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_1. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument mul is not promoted. Already torch.float32.\nArgument 3.141592653589793 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1])",
      "text":"Type promotion not needed for mul_1. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for sin. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sin.default)[call_function]:Tensor(f32[1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'sin', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.INT_TO_FLOAT)\nArgument mul_1 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1])",
      "text":"Type promotion not needed for sin. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Applied type promotion for mul_2. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument div is not promoted. Already torch.float32.\nArgument 2(Scalar of equivalent dtype: torch.int64) is promoted to torch.float32.\n## Return values\nTensor(f32[1])",
      "text":"Applied type promotion for mul_2. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_3. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument mul_2 is not promoted. Already torch.float32.\nArgument 3.141592653589793 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1])",
      "text":"Type promotion not needed for mul_3. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for cos. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.cos.default)[call_function]:Tensor(f32[1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'cos', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.INT_TO_FLOAT)\nArgument mul_3 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1])",
      "text":"Type promotion not needed for cos. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for sub. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sub.Tensor)[call_function]:Tensor(i64[1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'sub', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_1 is not promoted. Already torch.int64.\nArgument 2007 is not promoted. Already torch.int64.\n## Return values\nTensor(i64[1])",
      "text":"Type promotion not needed for sub. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._to_copy.default)[call_function]:Tensor(f32[1]): Cannot find type promotion rule for op: aten._to_copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._to_copy.default)[call_function]:Tensor(f32[1])\n## Return values\nTensor(f32[1])",
      "text":"Skipped for fx.Node(aten._to_copy.default)[call_function]:Tensor(f32[1]): Cannot find type promotion rule for op: aten._to_copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.stack.default)[call_function]:Tensor(f32[1, 3]): Cannot find type promotion rule for op: aten.stack.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.stack.default)[call_function]:Tensor(f32[1, 3])\n## Return values\nTensor(f32[1, 3])",
      "text":"Skipped for fx.Node(aten.stack.default)[call_function]:Tensor(f32[1, 3]): Cannot find type promotion rule for op: aten.stack.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 672, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 672, 10])\n## Return values\nTensor(f32[1, 672, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 672, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.mean.dim)[call_function]:Tensor(f32[1, 10]): Cannot find type promotion rule for op: aten.mean.dim\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mean.dim)[call_function]:Tensor(f32[1, 10])\n## Return values\nTensor(f32[1, 10])",
      "text":"Skipped for fx.Node(aten.mean.dim)[call_function]:Tensor(f32[1, 10]): Cannot find type promotion rule for op: aten.mean.dim"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.mean.dim)[call_function]:Tensor(f32[1, 10]): Cannot find type promotion rule for op: aten.mean.dim\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mean.dim)[call_function]:Tensor(f32[1, 10])\n## Return values\nTensor(f32[1, 10])",
      "text":"Skipped for fx.Node(aten.mean.dim)[call_function]:Tensor(f32[1, 10]): Cannot find type promotion rule for op: aten.mean.dim"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for cat. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 20])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'cat', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.NO_OPMATH)\nArgument [mean, mean_1] is a tuple/list. Promoting each element.\nArgument mean is not promoted. Already torch.float32.\nArgument mean_1 is not promoted. Already torch.float32.\nArgument 1 is not promoted. Not mentioned by type promotion rule.\n## Return values\nTensor(f32[1, 20])",
      "text":"Type promotion not needed for cat. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant0: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant0)[get_attr]:None\n## Return values\nTensor(b8[10])",
      "text":"Skipped _tensor_constant0: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, 32, u0]): Cannot find type promotion rule for op: aten.index.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, 32, u0])\n## Return values\nTensor(f32[1, 32, u0])",
      "text":"Skipped for fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, 32, u0]): Cannot find type promotion rule for op: aten.index.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(u0): Cannot find type promotion rule for op: aten.sym_size.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(u0)\n## Return values\nSymInt(u0)",
      "text":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(u0): Cannot find type promotion rule for op: aten.sym_size.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[32, u0]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[32, u0])\n## Return values\nTensor(f32[32, u0])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[32, u0]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant0_1: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant0)[get_attr]:None\n## Return values\nTensor(b8[10])",
      "text":"Skipped _tensor_constant0_1: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.index_put.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.index_put.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant1: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant1)[get_attr]:None\n## Return values\nTensor(b8[10])",
      "text":"Skipped _tensor_constant1: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, 32, u1]): Cannot find type promotion rule for op: aten.index.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, 32, u1])\n## Return values\nTensor(f32[1, 32, u1])",
      "text":"Skipped for fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, 32, u1]): Cannot find type promotion rule for op: aten.index.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(u1): Cannot find type promotion rule for op: aten.sym_size.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(u1)\n## Return values\nSymInt(u1)",
      "text":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(u1): Cannot find type promotion rule for op: aten.sym_size.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[32, u1]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[32, u1])\n## Return values\nTensor(f32[32, u1])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[32, u1]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant1_1: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant1)[get_attr]:None\n## Return values\nTensor(b8[10])",
      "text":"Skipped _tensor_constant1_1: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.index_put.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.index_put.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice_scatter.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant0_2: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant0)[get_attr]:None\n## Return values\nTensor(b8[10])",
      "text":"Skipped _tensor_constant0_2: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.repeat.default)[call_function]:Tensor(b8[20]): Cannot find type promotion rule for op: aten.repeat.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.repeat.default)[call_function]:Tensor(b8[20])\n## Return values\nTensor(b8[20])",
      "text":"Skipped for fx.Node(aten.repeat.default)[call_function]:Tensor(b8[20]): Cannot find type promotion rule for op: aten.repeat.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant1_2: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant1)[get_attr]:None\n## Return values\nTensor(b8[10])",
      "text":"Skipped _tensor_constant1_2: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.repeat.default)[call_function]:Tensor(b8[20]): Cannot find type promotion rule for op: aten.repeat.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.repeat.default)[call_function]:Tensor(b8[20])\n## Return values\nTensor(b8[20])",
      "text":"Skipped for fx.Node(aten.repeat.default)[call_function]:Tensor(b8[20]): Cannot find type promotion rule for op: aten.repeat.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, u8]): Cannot find type promotion rule for op: aten.index.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, u8])\n## Return values\nTensor(f32[1, u10])",
      "text":"Skipped for fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, u8]): Cannot find type promotion rule for op: aten.index.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(u8): Cannot find type promotion rule for op: aten.sym_size.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(u8)\n## Return values\nSymInt(u10)",
      "text":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(u8): Cannot find type promotion rule for op: aten.sym_size.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[u8]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[u8])\n## Return values\nTensor(f32[u10])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[u8]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.index_put.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.index_put.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice_scatter.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice_scatter.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, u9]): Cannot find type promotion rule for op: aten.index.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, u9])\n## Return values\nTensor(f32[1, u11])",
      "text":"Skipped for fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, u9]): Cannot find type promotion rule for op: aten.index.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(u9): Cannot find type promotion rule for op: aten.sym_size.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(u9)\n## Return values\nSymInt(u11)",
      "text":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(u9): Cannot find type promotion rule for op: aten.sym_size.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[u9]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[u9])\n## Return values\nTensor(f32[u11])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[u9]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.index_put.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.index_put.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice_scatter.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.slice_scatter.default)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice_scatter.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20])\n## Return values\nTensor(f32[1, 20])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 20]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for cat_1. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 23])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'cat', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.NO_OPMATH)\nArgument [stack, slice_scatter_9] is a tuple/list. Promoting each element.\nArgument stack is not promoted. Already torch.float32.\nArgument slice_scatter_9 is not promoted. Already torch.float32.\nArgument -1 is not promoted. Not mentioned by type promotion rule.\n## Return values\nTensor(f32[1, 23])",
      "text":"Type promotion not needed for cat_1. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.permute.default)[call_function]:Tensor(f32[1, 10, 32]): Cannot find type promotion rule for op: aten.permute.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.permute.default)[call_function]:Tensor(f32[1, 10, 32])\n## Return values\nTensor(f32[1, 10, 32])",
      "text":"Skipped for fx.Node(aten.permute.default)[call_function]:Tensor(f32[1, 10, 32]): Cannot find type promotion rule for op: aten.permute.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.permute.default)[call_function]:Tensor(f32[1, 10, 32]): Cannot find type promotion rule for op: aten.permute.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.permute.default)[call_function]:Tensor(f32[1, 10, 32])\n## Return values\nTensor(f32[1, 10, 32])",
      "text":"Skipped for fx.Node(aten.permute.default)[call_function]:Tensor(f32[1, 10, 32]): Cannot find type promotion rule for op: aten.permute.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant0: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant0)[get_attr]:None\n## Return values\nParameter(Tensor(f32[32, 10, 3]))",
      "text":"Skipped _param_constant0: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant1: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant1)[get_attr]:None\n## Return values\nParameter(Tensor(f32[32]))",
      "text":"Skipped _param_constant1: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 32, 32]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 32, 32])\n## Return values\nTensor(f32[1, 32, 32])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 32, 32]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.silu.default)[call_function]:Tensor(f32[1, 32, 32]): Cannot find type promotion rule for op: aten.silu.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.silu.default)[call_function]:Tensor(f32[1, 32, 32])\n## Return values\nTensor(f32[1, 32, 32])",
      "text":"Skipped for fx.Node(aten.silu.default)[call_function]:Tensor(f32[1, 32, 32]): Cannot find type promotion rule for op: aten.silu.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant2: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant2)[get_attr]:None\n## Return values\nParameter(Tensor(f32[32]))",
      "text":"Skipped _param_constant2: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant3: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant3)[get_attr]:None\n## Return values\nParameter(Tensor(f32[32]))",
      "text":"Skipped _param_constant3: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant2: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant2)[get_attr]:None\n## Return values\nTensor(f32[32])",
      "text":"Skipped _tensor_constant2: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant3: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant3)[get_attr]:None\n## Return values\nTensor(f32[32])",
      "text":"Skipped _tensor_constant3: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 32, 32]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 32, 32]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 32, 32]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 32, 32]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 32, 32]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 32, 32])\n## Return values\nTensor(f32[1, 32, 32])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 32, 32]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.clone.default)[call_function]:Tensor(f32[1, 32, 32]): Cannot find type promotion rule for op: aten.clone.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.clone.default)[call_function]:Tensor(f32[1, 32, 32])\n## Return values\nTensor(f32[1, 32, 32])",
      "text":"Skipped for fx.Node(aten.clone.default)[call_function]:Tensor(f32[1, 32, 32]): Cannot find type promotion rule for op: aten.clone.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.permute.default)[call_function]:Tensor(f32[1, 32, 32]): Cannot find type promotion rule for op: aten.permute.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.permute.default)[call_function]:Tensor(f32[1, 32, 32])\n## Return values\nTensor(f32[1, 32, 32])",
      "text":"Skipped for fx.Node(aten.permute.default)[call_function]:Tensor(f32[1, 32, 32]): Cannot find type promotion rule for op: aten.permute.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n## Return values\nTensor(f32[1, 2880, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n## Return values\nTensor(f32[1, 32, 10])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for cat_2. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 32, 42])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'cat', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.NO_OPMATH)\nArgument [slice_48, permute_2] is a tuple/list. Promoting each element.\nArgument slice_48 is not promoted. Already torch.float32.\nArgument permute_2 is not promoted. Already torch.float32.\nArgument -1 is not promoted. Not mentioned by type promotion rule.\n## Return values\nTensor(f32[1, 32, 42])",
      "text":"Type promotion not needed for cat_2. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 1344]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 1344])\n## Return values\nTensor(f32[1, 1344])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 1344]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for cat_3. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 1367])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'cat', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.NO_OPMATH)\nArgument [view_4, cat_1] is a tuple/list. Promoting each element.\nArgument view_4 is not promoted. Already torch.float32.\nArgument cat_1 is not promoted. Already torch.float32.\nArgument -1 is not promoted. Not mentioned by type promotion rule.\n## Return values\nTensor(f32[1, 1367])",
      "text":"Type promotion not needed for cat_3. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant4: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant4)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64, 1367]))",
      "text":"Skipped _param_constant4: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1367, 64]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1367, 64])\n## Return values\nTensor(f32[1367, 64])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1367, 64]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant5: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant5)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant5: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[1, 64]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[1, 64])\n## Return values\nTensor(f32[1, 64])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[1, 64]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.silu.default)[call_function]:Tensor(f32[1, 64]): Cannot find type promotion rule for op: aten.silu.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.silu.default)[call_function]:Tensor(f32[1, 64])\n## Return values\nTensor(f32[1, 64])",
      "text":"Skipped for fx.Node(aten.silu.default)[call_function]:Tensor(f32[1, 64]): Cannot find type promotion rule for op: aten.silu.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant6: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant6)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant6: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant7: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant7)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant7: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant4: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant4)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant4: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant5: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant5)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant5: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 64]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64])\n## Return values\nTensor(f32[1, 64])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.clone.default)[call_function]:Tensor(f32[1, 64]): Cannot find type promotion rule for op: aten.clone.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.clone.default)[call_function]:Tensor(f32[1, 64])\n## Return values\nTensor(f32[1, 64])",
      "text":"Skipped for fx.Node(aten.clone.default)[call_function]:Tensor(f32[1, 64]): Cannot find type promotion rule for op: aten.clone.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant8: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant8)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64, 64]))",
      "text":"Skipped _param_constant8: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[64, 64]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[64, 64])\n## Return values\nTensor(f32[64, 64])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[64, 64]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant9: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant9)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant9: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[1, 64]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[1, 64])\n## Return values\nTensor(f32[1, 64])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[1, 64]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.silu.default)[call_function]:Tensor(f32[1, 64]): Cannot find type promotion rule for op: aten.silu.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.silu.default)[call_function]:Tensor(f32[1, 64])\n## Return values\nTensor(f32[1, 64])",
      "text":"Skipped for fx.Node(aten.silu.default)[call_function]:Tensor(f32[1, 64]): Cannot find type promotion rule for op: aten.silu.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant10: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant10)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant10: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant11: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant11)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant11: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant6: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant6)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant6: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant7: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant7)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant7: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 64]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64])\n## Return values\nTensor(f32[1, 64])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.clone.default)[call_function]:Tensor(f32[1, 64]): Cannot find type promotion rule for op: aten.clone.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.clone.default)[call_function]:Tensor(f32[1, 64])\n## Return values\nTensor(f32[1, 64])",
      "text":"Skipped for fx.Node(aten.clone.default)[call_function]:Tensor(f32[1, 64]): Cannot find type promotion rule for op: aten.clone.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant12: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant12)[get_attr]:None\n## Return values\nParameter(Tensor(f32[144, 64]))",
      "text":"Skipped _param_constant12: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[64, 144]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[64, 144])\n## Return values\nTensor(f32[64, 144])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[64, 144]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant13: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant13)[get_attr]:None\n## Return values\nParameter(Tensor(f32[144]))",
      "text":"Skipped _param_constant13: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[1, 144]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[1, 144])\n## Return values\nTensor(f32[1, 144])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[1, 144]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.silu.default)[call_function]:Tensor(f32[1, 144]): Cannot find type promotion rule for op: aten.silu.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.silu.default)[call_function]:Tensor(f32[1, 144])\n## Return values\nTensor(f32[1, 144])",
      "text":"Skipped for fx.Node(aten.silu.default)[call_function]:Tensor(f32[1, 144]): Cannot find type promotion rule for op: aten.silu.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant14: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant14)[get_attr]:None\n## Return values\nParameter(Tensor(f32[144]))",
      "text":"Skipped _param_constant14: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant15: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant15)[get_attr]:None\n## Return values\nParameter(Tensor(f32[144]))",
      "text":"Skipped _param_constant15: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant8: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant8)[get_attr]:None\n## Return values\nTensor(f32[144])",
      "text":"Skipped _tensor_constant8: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant9: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant9)[get_attr]:None\n## Return values\nTensor(f32[144])",
      "text":"Skipped _tensor_constant9: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 144]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 144]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 144]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 144]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 144]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 144])\n## Return values\nTensor(f32[1, 144])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 144]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 48, 3]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 48, 3])\n## Return values\nTensor(f32[1, 48, 3])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 48, 3]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.split_with_sizes.default)[call_function]:List[length=3](\nTensor(f32[1, 48, 1]),\nTensor(f32[1, 48, 1]),\nTensor(f32[1, 48, 1]),\n): Cannot find type promotion rule for op: aten.split_with_sizes.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.split_with_sizes.default)[call_function]:List[length=3](\nTensor(f32[1, 48, 1]),\nTensor(f32[1, 48, 1]),\nTensor(f32[1, 48, 1]),\n)\n## Return values\nList[length=3](\nTensor(f32[1, 48, 1]),\nTensor(f32[1, 48, 1]),\nTensor(f32[1, 48, 1]),\n)",
      "text":"Skipped for fx.Node(aten.split_with_sizes.default)[call_function]:List[length=3](\nTensor(f32[1, 48, 1]),\nTensor(f32[1, 48, 1]),\nTensor(f32[1, 48, 1]),\n): Cannot find type promotion rule for op: aten.split_with_sizes.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 48, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 48, 1])\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 48, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 48, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 48, 1])\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 48, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 48, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 48, 1])\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 48, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_4. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_15 is not promoted. Already torch.float32.\nArgument 0.5 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Type promotion not needed for mul_4. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for exp. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.exp.default)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'exp', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.INT_TO_FLOAT)\nArgument mul_4 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Type promotion not needed for exp. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 48, 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 48, 1])\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 48, 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_5. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument exp is not promoted. Already torch.float32.\nArgument 1.0 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Type promotion not needed for mul_5. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Applied type promotion for mul_6. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument mul_5 is not promoted. Already torch.float32.\nArgument -1(Scalar of equivalent dtype: torch.int64) is promoted to torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Applied type promotion for mul_6. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_14 is not promoted. Already torch.float32.\nArgument mul_6 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Type promotion not needed for add. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_7. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument exp is not promoted. Already torch.float32.\nArgument 1.0 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Type promotion not needed for mul_7. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Applied type promotion for mul_8. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument mul_7 is not promoted. Already torch.float32.\nArgument 1(Scalar of equivalent dtype: torch.int64) is promoted to torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Applied type promotion for mul_8. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_1. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_14 is not promoted. Already torch.float32.\nArgument mul_8 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Type promotion not needed for add_1. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_9. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument exp is not promoted. Already torch.float32.\nArgument 2.0 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Type promotion not needed for mul_9. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Applied type promotion for mul_10. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument mul_9 is not promoted. Already torch.float32.\nArgument -1(Scalar of equivalent dtype: torch.int64) is promoted to torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Applied type promotion for mul_10. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_2. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_14 is not promoted. Already torch.float32.\nArgument mul_10 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Type promotion not needed for add_2. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_11. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument exp is not promoted. Already torch.float32.\nArgument 2.0 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Type promotion not needed for mul_11. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Applied type promotion for mul_12. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument mul_11 is not promoted. Already torch.float32.\nArgument 1(Scalar of equivalent dtype: torch.int64) is promoted to torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Applied type promotion for mul_12. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_3. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_14 is not promoted. Already torch.float32.\nArgument mul_12 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Type promotion not needed for add_3. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for cat_4. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 48, 4])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'cat', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.NO_OPMATH)\nArgument [add, add_1, add_2, add_3] is a tuple/list. Promoting each element.\nArgument add is not promoted. Already torch.float32.\nArgument add_1 is not promoted. Already torch.float32.\nArgument add_2 is not promoted. Already torch.float32.\nArgument add_3 is not promoted. Already torch.float32.\nArgument -1 is not promoted. Not mentioned by type promotion rule.\n## Return values\nTensor(f32[1, 48, 4])",
      "text":"Type promotion not needed for cat_4. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[192, 1]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[192, 1])\n## Return values\nTensor(f32[192, 1])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[192, 1]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 48, 4]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 48, 4])\n## Return values\nTensor(f32[1, 48, 4])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 48, 4]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for sigmoid. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 48, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'sigmoid', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.INT_TO_FLOAT)\nArgument getitem_16 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Type promotion not needed for sigmoid. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 48, 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 48, 1])\n## Return values\nTensor(f32[1, 48, 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 48, 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped output: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(output)[output]:None\n## Return values\nList[length=3](\nTensor(f32[1, 48, 1]),\nTensor(f32[1, 48, 4]),\nTensor(f32[1, 48, 1]),\n)",
      "text":"Skipped output: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1625
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running InsertTypePromotion pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion.InsertTypePromotion'>\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running InsertTypePromotion pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":243
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running Modularize pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.modularization.Modularize'>\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule()",
      "text":"Running Modularize pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":243
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:arg0[name=l_time_]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(arg0)[placeholder]:Tensor(i64[1, 2])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:arg0[name=l_time_]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:arg1[name=l_context_]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(arg1)[placeholder]:Tensor(f32[1, 2880, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:arg1[name=l_context_]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:arg2[name=arg2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(arg2)[placeholder]:None\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:arg2[name=arg2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.unbind.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.unbind.int)[call_function]:List[length=2](\nTensor(i64[1]),\nTensor(i64[1]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::unbind.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.unbind.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.unbind.int. \nONNX Node: aten_unbind[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.unbind.int)[call_function]:List[length=2](\nTensor(i64[1]),\nTensor(i64[1]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::unbind.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(i64[1, 2])`,\n-1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_unbind)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_unbind)`",
      "text":"FX Node: aten.unbind.int. \nONNX Node: aten_unbind[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.unbind.int[name=unbind]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.unbind.int)[call_function]:List[length=2](\nTensor(i64[1]),\nTensor(i64[1]),\n)\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 241, in calculate_timestamp_features\n    day_of_year, year = time.unbind(dim=-1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.unbind.int[name=unbind]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: '<built-in function getitem>' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::getitem.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: '<built-in function getitem>' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: <built-in function getitem>. \nONNX Node: aten_getitem[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::getitem.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor()`,\n0,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_getitem)`\n### Failed: input type mismatch for input 'self'!\nActual set() vs\nExpected {'seq(tensor(int64))', 'seq(tensor(bool))', 'seq(tensor(complex128))', 'seq(tensor(float16))', 'seq(tensor(int8))', 'seq(tensor(uint8))', 'seq(tensor(complex64))', 'seq(tensor(int16))', 'seq(tensor(bfloat16))', 'seq(tensor(double))', 'seq(tensor(float))', 'seq(tensor(int32))'}\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`OnnxFunction(aten_getitem)`",
      "text":"FX Node: <built-in function getitem>. \nONNX Node: aten_getitem[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 241, in calculate_timestamp_features\n    day_of_year, year = time.unbind(dim=-1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: '<built-in function getitem>' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::getitem.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: '<built-in function getitem>' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: <built-in function getitem>. \nONNX Node: aten_getitem[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::getitem.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor()`,\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_getitem)`\n### Failed: input type mismatch for input 'self'!\nActual set() vs\nExpected {'seq(tensor(int64))', 'seq(tensor(bool))', 'seq(tensor(complex128))', 'seq(tensor(float16))', 'seq(tensor(int8))', 'seq(tensor(uint8))', 'seq(tensor(complex64))', 'seq(tensor(int16))', 'seq(tensor(bfloat16))', 'seq(tensor(double))', 'seq(tensor(float))', 'seq(tensor(int32))'}\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`OnnxFunction(aten_getitem)`",
      "text":"FX Node: <built-in function getitem>. \nONNX Node: aten_getitem[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 241, in calculate_timestamp_features\n    day_of_year, year = time.unbind(dim=-1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._to_copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._to_copy.default)[call_function]:Tensor(f32[1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_to_copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._to_copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._to_copy.default. \nONNX Node: aten__to_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._to_copy.default)[call_function]:Tensor(f32[1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_to_copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(i64[1])`,\n)\n- onnx_kwargs: Dict[length=2](\ndtype: 1,\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__to_copy)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten__to_copy)`",
      "text":"FX Node: aten._to_copy.default. \nONNX Node: aten__to_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._to_copy.default[name=_to_copy]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._to_copy.default)[call_function]:Tensor(f32[1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 243, in calculate_timestamp_features\n    day_of_year = day_of_year.type(torch.float32) / 365.25\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._to_copy.default[name=_to_copy]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.div.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.div.Tensor)[call_function]:Tensor(f32[1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::div.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.div.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.div.Tensor. \nONNX Node: aten_div[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.div.Tensor)[call_function]:Tensor(f32[1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::div.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1])`,\n365.25,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_div)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_div)`",
      "text":"FX Node: aten.div.Tensor. \nONNX Node: aten_div[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.div.Tensor[name=div]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.div.Tensor)[call_function]:Tensor(f32[1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 243, in calculate_timestamp_features\n    day_of_year = day_of_year.type(torch.float32) / 365.25\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.div.Tensor[name=div]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.scalar_tensor.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.scalar_tensor.default)[call_function]:Tensor(f32[])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::scalar_tensor.default, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::scalar_tensor.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.scalar_tensor.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.scalar_tensor.default. \nONNX Node: aten_scalar_tensor[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_scalar_tensor_sym_number[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.scalar_tensor.default)[call_function]:Tensor(f32[])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::scalar_tensor.default, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::scalar_tensor.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n2,\n)\n- onnx_kwargs: Dict[length=1](\ndtype: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_scalar_tensor_sym_number)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_scalar_tensor_sym_number)`",
      "text":"FX Node: aten.scalar_tensor.default. \nONNX Node: aten_scalar_tensor[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_scalar_tensor_sym_number[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.scalar_tensor.default[name=scalar_tensor_default]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.scalar_tensor.default)[call_function]:Tensor(f32[])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 244, in calculate_timestamp_features\n    sin_day_of_year = (day_of_year * 2 * math.pi).sin()\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.scalar_tensor.default[name=scalar_tensor_default]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1])`,\n`TorchScriptTensor(f32[])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 244, in calculate_timestamp_features\n    sin_day_of_year = (day_of_year * 2 * math.pi).sin()\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1])`,\n3.141592653589793,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(double)', 'tensor(float)', 'tensor(float16)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 244, in calculate_timestamp_features\n    sin_day_of_year = (day_of_year * 2 * math.pi).sin()\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sin.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sin.default)[call_function]:Tensor(f32[1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sin.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sin.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sin.default. \nONNX Node: aten_sin[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sin.default)[call_function]:Tensor(f32[1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sin.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_sin)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_sin)`",
      "text":"FX Node: aten.sin.default. \nONNX Node: aten_sin[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sin.default[name=sin]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sin.default)[call_function]:Tensor(f32[1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 244, in calculate_timestamp_features\n    sin_day_of_year = (day_of_year * 2 * math.pi).sin()\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sin.default[name=sin]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.scalar_tensor.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.scalar_tensor.default)[call_function]:Tensor(f32[])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::scalar_tensor.default, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::scalar_tensor.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.scalar_tensor.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.scalar_tensor.default. \nONNX Node: aten_scalar_tensor[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_scalar_tensor_sym_number[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.scalar_tensor.default)[call_function]:Tensor(f32[])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::scalar_tensor.default, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::scalar_tensor.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n2,\n)\n- onnx_kwargs: Dict[length=1](\ndtype: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_scalar_tensor_sym_number)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_scalar_tensor_sym_number)`",
      "text":"FX Node: aten.scalar_tensor.default. \nONNX Node: aten_scalar_tensor[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_scalar_tensor_sym_number[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.scalar_tensor.default[name=scalar_tensor_default_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.scalar_tensor.default)[call_function]:Tensor(f32[])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=12](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 245, in calculate_timestamp_features\n    cos_day_of_year = (day_of_year * 2 * math.pi).cos()\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.scalar_tensor.default[name=scalar_tensor_default_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1])`,\n`TorchScriptTensor(f32[])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=13](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 245, in calculate_timestamp_features\n    cos_day_of_year = (day_of_year * 2 * math.pi).cos()\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1])`,\n3.141592653589793,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(double)', 'tensor(float)', 'tensor(float16)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=14](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 245, in calculate_timestamp_features\n    cos_day_of_year = (day_of_year * 2 * math.pi).cos()\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.cos.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.cos.default)[call_function]:Tensor(f32[1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::cos.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.cos.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.cos.default. \nONNX Node: aten_cos[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.cos.default)[call_function]:Tensor(f32[1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::cos.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_cos)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_cos)`",
      "text":"FX Node: aten.cos.default. \nONNX Node: aten_cos[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.cos.default[name=cos]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.cos.default)[call_function]:Tensor(f32[1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=15](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 245, in calculate_timestamp_features\n    cos_day_of_year = (day_of_year * 2 * math.pi).cos()\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.cos.default[name=cos]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sub.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sub.Tensor)[call_function]:Tensor(i64[1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sub.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sub.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sub.Tensor. \nONNX Node: aten_sub[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sub.Tensor)[call_function]:Tensor(i64[1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sub.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(i64[1])`,\n2007,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_sub)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_sub)`",
      "text":"FX Node: aten.sub.Tensor. \nONNX Node: aten_sub[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sub.Tensor[name=sub]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sub.Tensor)[call_function]:Tensor(i64[1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=16](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 247, in calculate_timestamp_features\n    years_since_2007 = (year - 2007).type(torch.float32)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sub.Tensor[name=sub]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._to_copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._to_copy.default)[call_function]:Tensor(f32[1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_to_copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._to_copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._to_copy.default. \nONNX Node: aten__to_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._to_copy.default)[call_function]:Tensor(f32[1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_to_copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(i64[1])`,\n)\n- onnx_kwargs: Dict[length=2](\ndtype: 1,\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__to_copy)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten__to_copy)`",
      "text":"FX Node: aten._to_copy.default. \nONNX Node: aten__to_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._to_copy.default[name=_to_copy_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._to_copy.default)[call_function]:Tensor(f32[1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=17](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 247, in calculate_timestamp_features\n    years_since_2007 = (year - 2007).type(torch.float32)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._to_copy.default[name=_to_copy_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.stack.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.stack.default)[call_function]:Tensor(f32[1, 3])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::stack.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.stack.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.stack.default. \nONNX Node: aten_stack[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.stack.default)[call_function]:Tensor(f32[1, 3])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::stack.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\nList[length=3](\n`TorchScriptTensor(f32[1])`,\n`TorchScriptTensor(f32[1])`,\n`TorchScriptTensor(f32[1])`,\n),\n-1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_stack)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_stack)`",
      "text":"FX Node: aten.stack.default. \nONNX Node: aten_stack[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.stack.default[name=stack]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.stack.default)[call_function]:Tensor(f32[1, 3])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=18](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 152, in forecast\n    datetime_features = self.calculate_timestamp_features(time)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 249, in calculate_timestamp_features\n    return torch.stack([sin_day_of_year, cos_day_of_year, years_since_2007], dim=-1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.stack.default[name=stack]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"datetime_features = self.calculate_timestamp_features(time)"
         },
         "startLine":152
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 2880, 10])`,\n0,\n0,\n9223372036854775807,\n)\n- onnx_kwargs: Dict[length=1](\nstep: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_slice)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_slice)`",
      "text":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.slice.Tensor[name=slice_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=19](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 155, in forecast\n    rolling_features = self.calculate_rolling_features(context)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 261, in calculate_rolling_features\n    features_to_roll[:, -window:].mean(dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.slice.Tensor[name=slice_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"rolling_features = self.calculate_rolling_features(context)"
         },
         "startLine":155
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 672, 10])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 672, 10])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 2880, 10])`,\n1,\n-672,\n9223372036854775807,\n)\n- onnx_kwargs: Dict[length=1](\nstep: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_slice)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_slice)`",
      "text":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.slice.Tensor[name=slice_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 672, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=20](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 155, in forecast\n    rolling_features = self.calculate_rolling_features(context)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 261, in calculate_rolling_features\n    features_to_roll[:, -window:].mean(dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.slice.Tensor[name=slice_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"rolling_features = self.calculate_rolling_features(context)"
         },
         "startLine":155
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mean.dim' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mean.dim)[call_function]:Tensor(f32[1, 10])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::mean.dim, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mean.dim' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mean.dim. \nONNX Node: aten_mean_dim[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mean.dim)[call_function]:Tensor(f32[1, 10])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::mean.dim, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 672, 10])`,\nList[length=1](\n1,\n),\n)\n- onnx_kwargs: Dict[length=1](\nkeepdim: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mean_dim)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mean_dim)`",
      "text":"FX Node: aten.mean.dim. \nONNX Node: aten_mean_dim[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mean.dim[name=mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mean.dim)[call_function]:Tensor(f32[1, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=21](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 155, in forecast\n    rolling_features = self.calculate_rolling_features(context)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 261, in calculate_rolling_features\n    features_to_roll[:, -window:].mean(dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mean.dim[name=mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"rolling_features = self.calculate_rolling_features(context)"
         },
         "startLine":155
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 2880, 10])`,\n0,\n0,\n9223372036854775807,\n)\n- onnx_kwargs: Dict[length=1](\nstep: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_slice)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_slice)`",
      "text":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.slice.Tensor[name=slice_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=22](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 155, in forecast\n    rolling_features = self.calculate_rolling_features(context)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 261, in calculate_rolling_features\n    features_to_roll[:, -window:].mean(dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.slice.Tensor[name=slice_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"rolling_features = self.calculate_rolling_features(context)"
         },
         "startLine":155
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 2880, 10])`,\n1,\n-2880,\n9223372036854775807,\n)\n- onnx_kwargs: Dict[length=1](\nstep: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_slice)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_slice)`",
      "text":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.slice.Tensor[name=slice_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=23](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 155, in forecast\n    rolling_features = self.calculate_rolling_features(context)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 261, in calculate_rolling_features\n    features_to_roll[:, -window:].mean(dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.slice.Tensor[name=slice_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"rolling_features = self.calculate_rolling_features(context)"
         },
         "startLine":155
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mean.dim' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mean.dim)[call_function]:Tensor(f32[1, 10])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::mean.dim, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mean.dim' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mean.dim. \nONNX Node: aten_mean_dim[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mean.dim)[call_function]:Tensor(f32[1, 10])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::mean.dim, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 2880, 10])`,\nList[length=1](\n1,\n),\n)\n- onnx_kwargs: Dict[length=1](\nkeepdim: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mean_dim)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mean_dim)`",
      "text":"FX Node: aten.mean.dim. \nONNX Node: aten_mean_dim[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mean.dim[name=mean_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mean.dim)[call_function]:Tensor(f32[1, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=24](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 155, in forecast\n    rolling_features = self.calculate_rolling_features(context)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 261, in calculate_rolling_features\n    features_to_roll[:, -window:].mean(dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mean.dim[name=mean_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"rolling_features = self.calculate_rolling_features(context)"
         },
         "startLine":155
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.cat.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 20])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::cat.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.cat.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.cat.default. \nONNX Node: aten_cat[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 20])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::cat.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\nList[length=2](\n`TorchScriptTensor(f32[1, 10])`,\n`TorchScriptTensor(f32[1, 10])`,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_cat)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_cat)`",
      "text":"FX Node: aten.cat.default. \nONNX Node: aten_cat[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.cat.default[name=cat]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 20])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=25](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 155, in forecast\n    rolling_features = self.calculate_rolling_features(context)\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 259, in calculate_rolling_features\n    return torch.cat(\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.cat.default[name=cat]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"rolling_features = self.calculate_rolling_features(context)"
         },
         "startLine":155
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 2880, 10])`,\n0,\n0,\n9223372036854775807,\n)\n- onnx_kwargs: Dict[length=1](\nstep: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_slice)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_slice)`",
      "text":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.slice.Tensor[name=slice_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 2880, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=26](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 158, in forecast\n    context = context[:, -self.config.context_length :]\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.slice.Tensor[name=slice_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"context = context[:, -self.config.context_length :]"
         },
         "startLine":158
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 2880, 10])`,\n1,\n-32,\n9223372036854775807,\n)\n- onnx_kwargs: Dict[length=1](\nstep: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_slice)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_slice)`",
      "text":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.slice.Tensor[name=slice_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=27](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 158, in forecast\n    context = context[:, -self.config.context_length :]\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.slice.Tensor[name=slice_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"context = context[:, -self.config.context_length :]"
         },
         "startLine":158
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 32, 10])`,\n0,\n0,\n9223372036854775807,\n)\n- onnx_kwargs: Dict[length=1](\nstep: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_slice)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_slice)`",
      "text":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.slice.Tensor[name=slice_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=28](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 164, in forecast\n    context[:, :, self.level_cols]\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.slice.Tensor[name=slice_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"context[:, :, self.level_cols]"
         },
         "startLine":164
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 32, 10])`,\n1,\n0,\n9223372036854775807,\n)\n- onnx_kwargs: Dict[length=1](\nstep: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_slice)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_slice)`",
      "text":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.slice.Tensor[name=slice_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=29](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 164, in forecast\n    context[:, :, self.level_cols]\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.slice.Tensor[name=slice_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"context[:, :, self.level_cols]"
         },
         "startLine":164
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:_tensor_constant0[name=_tensor_constant0]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(_tensor_constant0)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=30](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 164, in forecast\n    context[:, :, self.level_cols]\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:_tensor_constant0[name=_tensor_constant0]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"context[:, :, self.level_cols]"
         },
         "startLine":164
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.index.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, 32, u0])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::index.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::index.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.index.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.index.Tensor. \nONNX Node: aten_index[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_index_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, 32, u0])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::index.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::index.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 32, 10])`,\nList[length=3](\n<class 'NoneType'>,\n<class 'NoneType'>,\n`TorchScriptTensor(b8[10])`,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_index_bool)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_index_bool)`",
      "text":"FX Node: aten.index.Tensor. \nONNX Node: aten_index[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_index_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.index.Tensor[name=index]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.index.Tensor)[call_function]:Tensor(f32[1, 32, u0])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=31](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 164, in forecast\n    context[:, :, self.level_cols]\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.index.Tensor[name=index]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"context[:, :, self.level_cols]"
         },
         "startLine":164
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 32, 10])`,\n0,\n0,\n9223372036854775807,\n)\n- onnx_kwargs: Dict[length=1](\nstep: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_slice)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_slice)`",
      "text":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.slice.Tensor[name=slice_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=32](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 163, in forecast\n    context[:, :, self.level_cols] = self.level_preprocessing.transform(\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.slice.Tensor[name=slice_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"context[:, :, self.level_cols] = self.level_preprocessing.transform("
         },
         "startLine":163
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.slice.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::slice.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 32, 10])`,\n1,\n0,\n9223372036854775807,\n)\n- onnx_kwargs: Dict[length=1](\nstep: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_slice)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_slice)`",
      "text":"FX Node: aten.slice.Tensor. \nONNX Node: aten_slice[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.slice.Tensor[name=slice_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[1, 32, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=33](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 163, in forecast\n    context[:, :, self.level_cols] = self.level_preprocessing.transform(\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.slice.Tensor[name=slice_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"context[:, :, self.level_cols] = self.level_preprocessing.transform("
         },
         "startLine":163
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(u0)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(u0)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 32, u0])`,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_sym_size)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_sym_size)`",
      "text":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sym_size.int[name=sym_size_int]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(u0)\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=34](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 163, in forecast\n    context[:, :, self.level_cols] = self.level_preprocessing.transform(\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sym_size.int[name=sym_size_int]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"context[:, :, self.level_cols] = self.level_preprocessing.transform("
         },
         "startLine":163
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[32, u0])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[32, u0])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 32, u0])`,\n`TorchScriptTensor(i64[2])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[32, u0])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=35](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 163, in forecast\n    context[:, :, self.level_cols] = self.level_preprocessing.transform(\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"context[:, :, self.level_cols] = self.level_preprocessing.transform("
         },
         "startLine":163
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:_tensor_constant0[name=_tensor_constant0_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(_tensor_constant0)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=36](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 163, in forecast\n    context[:, :, self.level_cols] = self.level_preprocessing.transform(\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:_tensor_constant0[name=_tensor_constant0_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"context[:, :, self.level_cols] = self.level_preprocessing.transform("
         },
         "startLine":163
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.index_put.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 32, 10])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::index_put.default, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::index_put.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.index_put.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":353
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.index_put.default. \nONNX Node: aten_index_put[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_index_put_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 32, 10])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::index_put.default, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::index_put.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[1, 32, 10])`,\nList[length=3](\n<class 'NoneType'>,\n<class 'NoneType'>,\n`TorchScriptTensor(b8[10])`,\n),\n`TorchScriptTensor(f32[32, u0])`,\n)\n- onnx_kwargs: Dict[length=1](\naccumulate: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_index_put_bool)`\nmatch score: 3\n## Return values\n`OnnxFunction(aten_index_put_bool)`",
      "text":"FX Node: aten.index_put.default. \nONNX Node: aten_index_put[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_index_put_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":199
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.index_put.default[name=index_put]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.index_put.default)[call_function]:Tensor(f32[1, 32, 10])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=37](\nl_time_: `TorchScriptTensor(i64[1, 2])`,\nl_context_: `TorchScriptTensor(f32[1, 2880, 10])`,\narg2: `TorchScriptTensor()`,\nunbind: `TorchScriptTensor()`,\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n_to_copy: `TorchScriptTensor(f32[1])`,\ndiv: `TorchScriptTensor(f32[1])`,\nscalar_tensor_default: `TorchScriptTensor(f32[])`,\nmul: `TorchScriptTensor(f32[1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py\", line 163, in forecast\n    context[:, :, self.level_cols] = self.level_preprocessing.transform(\n\n```\n## Exception log\n```\nTraceback (most recent call last):\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 136, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 471, in run_node\n    self.call_function(\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 703, in call_function\n    ] = symbolic_fn(*onnx_args, **onnx_kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/onnxscript/values.py\", line 529, in __call__\n    return evaluator.default().eval_function(self, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 425, in eval_function\n    return self._graph.add_function_call(function, inputs, attributes)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 908, in add_function_call\n    result = self._add_torchscript_op_call(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 761, in _add_torchscript_op_call\n    graph_inputs.append(self._add_constant_to_graph(input))\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 721, in _add_constant_to_graph\n    raise TypeError(\n\nTypeError: Constant input '[None, None, _tensor_constant0 defined in (%l_time_ : Long(1, 2), %l_context_ : Float(1, 2880, 10), %_tensor_constant0 : Bool(10, strides=[1], requires_grad=0, device=cpu) = prim::Param()\n)]' of type '<class 'list'>' is not supported\n\n```",
      "text":"FX Node: call_function:aten.index_put.default[name=index_put]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"error",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":414
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/src/model.py"
        },
        "region":{
         "snippet":{
          "text":"context[:, :, self.level_cols] = self.level_preprocessing.transform("
         },
         "startLine":163
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: . \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- op_level_debug: False\n## Exception log\n```\nTraceback (most recent call last):\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 136, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 577, in run\n    self.run_node(\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 152, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 369, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 136, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 471, in run_node\n    self.call_function(\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 703, in call_function\n    ] = symbolic_fn(*onnx_args, **onnx_kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/onnxscript/values.py\", line 529, in __call__\n    return evaluator.default().eval_function(self, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 425, in eval_function\n    return self._graph.add_function_call(function, inputs, attributes)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 908, in add_function_call\n    result = self._add_torchscript_op_call(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 761, in _add_torchscript_op_call\n    graph_inputs.append(self._add_constant_to_graph(input))\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 721, in _add_constant_to_graph\n    raise TypeError(\n\nTypeError: Constant input '[None, None, _tensor_constant0 defined in (%l_time_ : Long(1, 2), %l_context_ : Float(1, 2880, 10), %_tensor_constant0 : Bool(10, strides=[1], requires_grad=0, device=cpu) = prim::Param()\n)]' of type '<class 'list'>' is not supported\n\n```",
      "text":"FX Graph: . "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"error",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ed/sata-ssd/code/river-level-analysis/level_prediction_training/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@_beartype.beartype"
         },
         "startLine":496
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    }
   ]
  }
 ],
 "version":"2.1.0",
 "schemaUri":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/schemas/sarif-schema-2.1.0.json"
}